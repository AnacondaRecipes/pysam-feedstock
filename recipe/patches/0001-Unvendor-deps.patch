--- setup.py	2025-08-14 09:28:27
+++ setup_new.py	2025-08-14 09:43:06
@@ -500,6 +500,9 @@
     # all object files are pulled into the link, even those not used by htslib itself.
     htslib_objects = [os.path.join("htslib", x)
                       for x in htslib_make_options["LIBHTS_OBJS"].split(" ")]
+    if platform.system() == "Linux":
+        # Objects on Linux are named .pico instead of .o when running "make lib-shared"...
+        htslib_objects = [x.replace(".o", ".pico") for x in htslib_objects]
     separate_htslib_objects = []
 
     htslib_library_dirs = ["."] # when using setup.py develop?
@@ -597,16 +600,17 @@
 
     write_configvars_header("htslib/config_vars.h", ext, "HTS")
 
-    if force or not os.path.exists("htslib/libhts.a"):
-        log.info("building 'libhts.a'")
+    shlib_ext = os.environ["SHLIB_EXT"]
+    if force or not os.path.exists("htslib/libhts{0}".format(shlib_ext)):
+        log.info("building 'libhts{0}'".format(shlib_ext))
         with changedir("htslib"):
             # TODO Eventually by running configure here, we can set these
             # extra flags for configure instead of hacking on ALL_CPPFLAGS.
             args = " ".join(ext.extra_compile_args)
             defines = " ".join([format_macro_option(*pair) for pair in ext.define_macros])
-            run_make(["ALL_CPPFLAGS=-I. " + args + " " + defines + " $(CPPFLAGS)", "lib-static"])
+            run_make(["ALL_CPPFLAGS=-I. " + args + " " + defines + " $(CPPFLAGS)", "lib-shared"])
     else:
-        log.warning("skipping 'libhts.a' (already built)")
+        log.warning("skipping 'libhts{0}' (already built)".format(shlib_ext))
 
 
 def prebuild_libcsamtools(ext, force):
@@ -621,10 +625,9 @@
          libraries=external_htslib_libraries),
     dict(name="pysam.libcsamtools",
          prebuild_func=prebuild_libcsamtools,
-         sources=[source_pattern % "samtools"] + glob.glob(os.path.join("samtools", "*.pysam.c")) +
-         [os.path.join("samtools", "lz4", "lz4.c")] + os_c_files,
+         sources=[source_pattern % "samtools"] + glob.glob(os.path.join("samtools", "*.pysam.c")) + os_c_files,
          extra_objects=separate_htslib_objects,
-         libraries=external_htslib_libraries + internal_htslib_libraries),
+         libraries=external_htslib_libraries + internal_htslib_libraries + ["lz4"]),
     dict(name="pysam.libcbcftools",
          sources=[source_pattern % "bcftools"] + glob.glob(os.path.join("bcftools", "*.pysam.c")) + os_c_files,
          extra_objects=separate_htslib_objects,
@@ -678,7 +681,7 @@
     # for out-of-tree compilation, use absolute paths
     library_dirs=[os.path.abspath(x) for x in ["pysam"] + htslib_library_dirs],
     include_dirs=[os.path.abspath(x) for x in ["pysam"] + htslib_include_dirs + \
-                  ["samtools", "samtools/lz4", "bcftools", "."] + include_os])
+                  ["samtools", "bcftools", "."] + include_os])
 
 # add common options (in python >3.5, could use n = {**a, **b}
 for module in modules:
