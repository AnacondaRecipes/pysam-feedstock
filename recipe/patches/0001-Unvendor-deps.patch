From ea2cc90121095b030c3c92d087df3436d79087e0 Mon Sep 17 00:00:00 2001
From: Jean-Christophe Morin <jcmorin@anaconda.com>
Date: Fri, 2 Feb 2024 13:51:49 -0500
Subject: [PATCH] Unvendor lz4 and compile a dynalic htslib instead of static.

Note that we don't unvendor samtools and bcftools because they are modified from upstream
and we can't unvendor them. As for htslib, it was considered unnecessary to unvendor
since its version is tightly coupled with pysam, bcftools and samtools.

---
 setup.py | 20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

diff --git a/setup.py b/setup.py
index a4bf36d..c4c43da 100644
--- a/setup.py
+++ b/setup.py
@@ -474,6 +474,9 @@ elif HTSLIB_MODE == 'shared':
     # all object files are pulled into the link, even those not used by htslib itself.
     htslib_objects = [os.path.join("htslib", x)
                       for x in htslib_make_options["LIBHTS_OBJS"].split(" ")]
+    if platform.system() == "Linux":
+        # Objects on Linux are named .pico instead of .o when running "make lib-shared"...
+        htslib_objects = [x.replace(".o", ".pico") for x in htslib_objects]
     separate_htslib_objects = []
 
     htslib_library_dirs = ["."] # when using setup.py develop?
@@ -566,15 +569,16 @@ def prebuild_libchtslib(ext, force):
 
     write_configvars_header("htslib/config_vars.h", ext, "HTS")
 
-    if force or not os.path.exists("htslib/libhts.a"):
-        log.info("building 'libhts.a'")
+    shlib_ext = os.environ["SHLIB_EXT"]
+    if force or not os.path.exists("htslib/libhts{0}".format(shlib_ext)):
+        log.info("building 'libhts{0}'".format(shlib_ext))
         with changedir("htslib"):
             # TODO Eventually by running configure here, we can set these
             # extra flags for configure instead of hacking on ALL_CPPFLAGS.
             args = " ".join(ext.extra_compile_args)
-            run_make(["ALL_CPPFLAGS=-I. " + args + " $(CPPFLAGS)", "lib-static"])
+            run_make(["ALL_CPPFLAGS=-I. " + args + " $(CPPFLAGS)", "lib-shared"])
     else:
-        log.warning("skipping 'libhts.a' (already built)")
+        log.warning("skipping 'libhts{0}' (already built)".format(shlib_ext))
 
 
 def prebuild_libcsamtools(ext, force):
@@ -589,10 +593,10 @@ modules = [
          libraries=external_htslib_libraries),
     dict(name="pysam.libcsamtools",
          prebuild_func=prebuild_libcsamtools,
-         sources=[source_pattern % "samtools"] + glob.glob(os.path.join("samtools", "*.pysam.c")) +
-         [os.path.join("samtools", "lz4", "lz4.c")] + os_c_files,
+         sources=[source_pattern % "samtools"] + glob.glob(os.path.join("samtools", "*.pysam.c")) \
+         + os_c_files,
          extra_objects=separate_htslib_objects,
-         libraries=external_htslib_libraries + internal_htslib_libraries),
+         libraries=external_htslib_libraries + internal_htslib_libraries + ["lz4"]),
     dict(name="pysam.libcbcftools",
          sources=[source_pattern % "bcftools"] + glob.glob(os.path.join("bcftools", "*.pysam.c")) + os_c_files,
          extra_objects=separate_htslib_objects,
@@ -646,7 +650,7 @@ common_options = dict(
     # for out-of-tree compilation, use absolute paths
     library_dirs=[os.path.abspath(x) for x in ["pysam"] + htslib_library_dirs],
     include_dirs=[os.path.abspath(x) for x in ["pysam"] + htslib_include_dirs + \
-                  ["samtools", "samtools/lz4", "bcftools", "."] + include_os])
+                  ["samtools", "bcftools"] + include_os])
 
 # add common options (in python >3.5, could use n = {**a, **b}
 for module in modules:
-- 
2.43.0

